
import java.util.*;

public class 가장먼노드 {

    class Node{
        int n; //번호
        int dist;
        boolean visit;
        List<Node> links = new LinkedList<>();
        Node(int n) { this.n = n;}
    }
    public int solution(int n, int[][] edge){
        List<Node> list = new ArrayList<>(n); //arrayList로 get하는 것이 빠르기 때문에 사용
        for(int i = 0; i < n; i++) list.add(new Node(i+1)); //노드를 넣어준다

        //노드 연결하기
        for(int[] e: edge){
            Node n1 = list.get(e[0]-1); //e[0]-1는 인덱스
            Node n2 = list.get(e[1] -1);
            n1.links.add(n2);
            n2.links.add(n1);
        }

        //bfs
        int maxDist = 0;
        Queue<Node> queue = new LinkedList<>();
        list.get(0).visit = true;
        queue.offer(list.get(0));

        while(!queue.isEmpty()){
            Node now = queue.poll();

            for(Node node: now.links){
                if(node.visit) continue;

                node.visit = true;
                node.dist = now.dist+1; //dist에 값 부여
                queue.offer(node);

                maxDist = Math.max(maxDist, node.dist);
            }
        }

        int answer = 0;
        for(Node node: list){
            if(node.dist == maxDist) answer++;
        }
        return answer;
    }
}
